class Solution {
/*
387.字符串中的第一个唯一字符
给定一个字符串 s ，找到 它的第一个不重复的字符，并返回它的索引 。如果不存在，则返回 -1 。
*/
  public int firstUniqChar(String s) {
    int res = -1;
    for(char ch = 'a'; ch <= 'z'; ch++) {
      int index = s.indexOf(ch);
      if(index != -1 && index == s.lastIndexOf(ch)) {
        res = (res == -1 || index < res) ? index : res;
      }
    }
    return res;
  }
/*
389.找不同
给定两个字符串 s 和 t ，它们只包含小写字母。
字符串 t 由字符串 s 随机重排，然后在随机位置添加一个字母。
请找出在 t 中被添加的字母。
*/
  public char findTheDifference(String s, String t) {
    int ans = 0;
    for(int i = 0; i < t.length(); i++) {
      ans += t.charAt(i);
    }
    for(int i = 0; i < s.length(); i++) {
      ans -= s.charAt(i);
    }
    return (char)ans;
  }
/*
392.判断子序列
给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。
进阶：
如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？
*/
  public boolean isSubsequence(String s, String t) {
    int n = s.length();
    int m = t.length();
    int i = 0, j = 0;
    while(i < n && j < m) {
      if(s.charAt(i) == t.charAt(j)) {
        i++;
      }
      j++;
    }
    return i == n;
  }
}
